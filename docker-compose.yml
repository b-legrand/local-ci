version: '2'

services:
  #
  # Nexus : code artifact and docker images repository
  #
  #nexus:
  #  image: sonatype/nexus3
  #  ports:
  #    - "8081:8081"
  #  environment:
  #    - VIRTUAL_HOST=nexus.local
  

  elasticsearch:
    build:
      context: ./apps/elasticsearch/
    volumes:
      - ./apps/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk

  logstash:
    build:
      context: ./apps/logstash/
    volumes:
      - ./apps/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./apps/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ./apps/kibana/
    volumes:
      - ./apps/kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    environment: 
      - VIRTUAL_HOST=super.local
      - VIRTUAL_PORT=5601
    networks:
      - elk
      - public
    depends_on:
      - elasticsearch
      - apm
      - nginx-proxy

  apm:
    build:
      context: ./apps/apm/
    volumes:
      - ./apps/apm/config/:/usr/share/apm/config:ro
    ports:
      - "8200:8200"
    networks:
      - elk
    depends_on:
      - elasticsearch

  #
  # Sonar : static code analysis
  #
  sonar:
    image: sonarqube
    ports:
      - 9000:9000
      - 9092:9092
    environment:
      - VIRTUAL_HOST=sonar.local
      - VIRTUAL_PORT=9000
      - sonar.jdbc.username=sonarqube
      - sonar.jdbc.password=sonarqube
      - sonar.jdbc.url=jdbc:postgresql://postgres:5432/sonarqube
    depends_on:
      - postgres
      - nginx
    volumes:
      - ./data/sonar/logs:/opt/sonarqube/logs
      - ./data/sonar/extensions:/opt/sonarqube/extensions
      - ./data/sonar/data:/opt/sonarqube/data

  gitea:
    image: gitea/gitea:latest
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - ROOT_URL=http://gitea.local
      - VIRTUAL_HOST=gitea.local,git.local
      - VIRTUAL_PORT=3000,222
    restart: always
    depends_on:
      - postgres
      - nginx-proxy
    volumes:
      - ./gitea/data:/data
    ports:
      - "3000:3000"
      - "222:22"

  drone-server:
    image: drone/drone:1  
    ports:
      - 8000
      - 9000
    volumes:
      - ./apps/drone/data:/var/lib/drone/
    restart: always
    depends_on:
      - nginx-proxy
      - gitea
    environment:
      - DRONE_OPEN=true
      - DRONE_HOST=http://drone.local
      - DRONE_GITEA=true
      - DRONE_GITEA_URL=http://gitea.local
      - DRONE_SECRET=secret
      - DRONE_NETWORK=gitea_default
      - VIRTUAL_HOST=drone.local
      - VIRTUAL_PORT=8000

  drone-agent:
    image: drone/agent:0.8
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone.local
      - DRONE_SECRET=secret
      - VIRTUAL_HOST=drone.local
      - VIRTUAL_PORT=9000

  #
  # Postgres database
  #
  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - ./data/pg/data:/var/lib/postgresql/data
      - ./data/pg/entrypoint:/docker-entrypoint-initdb.d

  #
  # DB admin interface
  #
  adminer:
    image: adminer
    restart: always
    ports:
      - 8083:8080
    environment:
      - VIRTUAL_HOST=adminer.local
    depends_on:
      - postgres
      - nginx

  #
  # reverse proxy
  #
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro

  #
  # drupal
  #
  drupal:
    image: drupal:8.9.2-fpm
    environment:
    - VIRTUAL_HOST=drupal.local
    - VIRTUAL_PORT=9000
    depends_on: 
      - nginx-proxy

  #
  # lighthouse ci
  #
  light:
    image: patrickhulce/lhci-server
    ports:
      - '9001:9001'
    volumes:
      - ./apps/data/lhci:/data
    environment:
      - VIRTUAL_HOST=light.local
      - VIRTUAL_PORT=9001
    depends_on: 
      - nginx-proxy

  www:
    image: nginx
    volumes: 
      - ./apps/home/:/usr/share/nginx/html
    environment:
      - VIRTUAL_HOST=home.local

networks:

  elk:
    driver: bridge
  public:
